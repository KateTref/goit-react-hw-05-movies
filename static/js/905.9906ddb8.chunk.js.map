{"version":3,"file":"static/js/905.9906ddb8.chunk.js","mappings":"uRACMA,EAAU,mCAEHC,EAAW,mCAAG,sGACFC,EAAAA,EAAAA,IAAA,mEACuCF,EADvC,YADE,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,QAAQC,KAAI,SAAAC,GACtB,MAAO,CACLC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MAEf,KATwB,2CAAH,qDAYXC,EAAU,mCAAG,WAAMF,GAAN,yFACDL,EAAAA,EAAAA,IAAA,6CACiBK,EADjB,oBAC+BP,EAD/B,oBADC,uBAChBG,EADgB,EAChBA,KADgB,kBAIjB,CACLO,MAAOP,EAAKQ,YACZH,MAAOL,EAAKK,MACZI,KAAMT,EAAKU,aACXC,MAAOX,EAAKY,aACZC,SAAUb,EAAKa,SACfC,OAAQd,EAAKc,SAVS,2CAAH,sDAcVC,EAAQ,mCAAG,WAAMX,GAAN,yFACCL,EAAAA,EAAAA,IAAA,6CACiBK,EADjB,4BACuCP,EADvC,oBADD,uBACdG,EADc,EACdA,KADc,kBAIfA,EAAKgB,KAAKd,KAAI,SAAAe,GACnB,MAAO,CACLC,OAAQD,EAAKE,aACbC,KAAMH,EAAKG,KACXC,UAAWJ,EAAKI,UAEnB,KAVqB,2CAAH,sDAaRC,EAAW,mCAAG,WAAMlB,GAAN,yFACFL,EAAAA,EAAAA,IAAA,6CACiBK,EADjB,4BACuCP,EADvC,2BADE,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,QAAQC,KAAI,SAAAqB,GACtB,MAAO,CACLC,OAAQD,EAAOC,OACfC,QAASF,EAAOE,QAChBC,SAAUH,EAAOnB,GAEpB,KAVwB,2CAAH,qD,4CC3BxB,IAbe,WACb,OACE,SAAC,KAAD,CACEuB,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,QACNC,UAAU,UACVC,cAAY,EACZC,cAAY,GAGjB,C,wJCRc,SAASC,IACtB,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEQrC,GAAOsC,EAAAA,EAAAA,MAAPtC,GAkBR,OAjBAuC,QAAQC,IAAIxC,IAEZyC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIR,GAAa,GAFjB,UAG2Bf,EAAAA,EAAAA,IAAYlB,GAHvC,OAGUoC,EAHV,OAIIC,EAAYD,GAJhB,gDAMID,EAAS,+BANb,yBAQIF,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAYdS,EACD,GAAE,CAAC1C,KAGF,gCACGgC,IAAa,SAAC,IAAD,IACbE,IAAS,uBAAIA,KACd,wBACGE,EAAStC,KAAI,SAAAqB,GACZ,OACE,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOG,SAKnB,QAIR,C","sources":["api.js","components/Loader.js","components/Reviewes.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '768a976ba726350d854c210d487f9812';\n\nexport const getTrending = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}&page=1`\n  );\n  return data.results.map(film => {\n    return {\n      id: film.id,\n      title: film.title,\n    };\n  });\n};\n\nexport const getDetails = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return {\n    image: data.poster_path,\n    title: data.title,\n    date: data.release_date,\n    score: data.vote_average,\n    overview: data.overview,\n    genres: data.genres,\n  };\n};\n\nexport const getCasts = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data.cast.map(elem => {\n    return {\n      avatar: elem.profile_path,\n      name: elem.name,\n      character: elem.character,\n    };\n  });\n};\n\nexport const getReviewes = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data.results.map(review => {\n    return {\n      author: review.author,\n      content: review.content,\n      reviewId: review.id,\n    };\n  });\n};\n","import { Audio } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <Audio\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"green\"\n      ariaLabel=\"loading\"\n      wrapperStyle\n      wrapperClass\n    />\n  );\n};\nexport default Loader;\n","import { getReviewes } from 'api';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from './Loader';\n\nexport default function Reviewes() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [reviewes, setReviewes] = useState([]);\n\n  const { id } = useParams();\n  console.log(id);\n\n  useEffect(() => {\n    async function onGetReviewes() {\n      try {\n        setIsLoading(true);\n        const reviewes = await getReviewes(id);\n        setReviewes(reviewes);\n      } catch {\n        setError('Sorry, we can not get data.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    onGetReviewes();\n  }, [id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      <ul>\n        {reviewes.map(review => {\n          return (\n            <li key={review.reviewId}>\n              <h1>{review.author}</h1>\n              <p>{review.content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n"],"names":["API_KEY","getTrending","axios","data","results","map","film","id","title","getDetails","image","poster_path","date","release_date","score","vote_average","overview","genres","getCasts","cast","elem","avatar","profile_path","name","character","getReviewes","review","author","content","reviewId","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClass","Reviewes","useState","isLoading","setIsLoading","error","setError","reviewes","setReviewes","useParams","console","log","useEffect","onGetReviewes"],"sourceRoot":""}