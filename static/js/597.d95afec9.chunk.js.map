{"version":3,"file":"static/js/597.d95afec9.chunk.js","mappings":"uRACMA,EAAU,mCAEHC,EAAW,mCAAG,sGACFC,EAAAA,EAAAA,IAAA,mEACuCF,EADvC,YADE,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,QAAQC,KAAI,SAAAC,GACtB,MAAO,CACLC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MAEf,KATwB,2CAAH,qDAYXC,EAAU,mCAAG,WAAMF,GAAN,yFACDL,EAAAA,EAAAA,IAAA,6CACiBK,EADjB,oBAC+BP,EAD/B,oBADC,uBAChBG,EADgB,EAChBA,KADgB,kBAIjB,CACLO,MAAOP,EAAKQ,YACZH,MAAOL,EAAKK,MACZI,KAAMT,EAAKU,aACXC,MAAOX,EAAKY,aACZC,SAAUb,EAAKa,SACfC,OAAQd,EAAKc,SAVS,2CAAH,sDAcVC,EAAQ,mCAAG,WAAMX,GAAN,yFACCL,EAAAA,EAAAA,IAAA,6CACiBK,EADjB,4BACuCP,EADvC,oBADD,uBACdG,EADc,EACdA,KADc,kBAIfA,EAAKgB,KAAKd,KAAI,SAAAe,GACnB,MAAO,CACLC,OAAQD,EAAKE,aACbC,KAAMH,EAAKG,KACXC,UAAWJ,EAAKI,UAEnB,KAVqB,2CAAH,sDAaRC,EAAW,mCAAG,WAAMlB,GAAN,yFACFL,EAAAA,EAAAA,IAAA,6CACiBK,EADjB,4BACuCP,EADvC,2BADE,uBACjBG,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,QAAQC,KAAI,SAAAqB,GACtB,MAAO,CACLC,OAAQD,EAAOC,OACfC,QAASF,EAAOE,QAChBC,SAAUH,EAAOnB,GAEpB,KAVwB,2CAAH,qD,wJCpCT,SAASuB,IACtB,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOK,EAAP,KAAeC,EAAf,KAEQ9B,GAAO+B,EAAAA,EAAAA,MAAP/B,GAiBR,OAfAgC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIN,GAAa,GAFjB,UAGyBf,EAAAA,EAAAA,IAASX,GAHlC,OAGU6B,EAHV,OAIII,QAAQC,IAAIL,GACZC,EAAUD,GALd,gDAOID,EAAS,+BAPb,yBASIF,GAAa,GATjB,6EADc,uBAAC,WAAD,wBAadS,EACD,GAAE,CAACnC,KAEF,+BACE,0BACG2B,IAAS,uBAAIA,IACbF,IAAa,SAAC,IAAD,IACbI,EAAO/B,KAAI,SAAAsC,GACV,OACE,0BACGA,EAAMtB,QACL,gBACEuB,IAAG,0CAAqCD,EAAMtB,QAC9CwB,IAAKF,EAAMpB,QAGb,gBACEqB,IAAI,6IACJC,IAAKF,EAAMpB,KACXuB,MAAO,OAGX,uBAAIH,EAAMpB,QACV,uBAAIoB,EAAMnB,cAdHmB,EAAMpB,KAiBlB,QAIR,C,4CCzCD,IAbe,WACb,OACE,SAAC,KAAD,CACEwB,OAAO,KACPD,MAAM,KACNE,OAAO,IACPC,MAAM,QACNC,UAAU,UACVC,cAAY,EACZC,cAAY,GAGjB,C","sources":["api.js","components/Cast.jsx","components/Loader.js"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '768a976ba726350d854c210d487f9812';\n\nexport const getTrending = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}&page=1`\n  );\n  return data.results.map(film => {\n    return {\n      id: film.id,\n      title: film.title,\n    };\n  });\n};\n\nexport const getDetails = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return {\n    image: data.poster_path,\n    title: data.title,\n    date: data.release_date,\n    score: data.vote_average,\n    overview: data.overview,\n    genres: data.genres,\n  };\n};\n\nexport const getCasts = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data.cast.map(elem => {\n    return {\n      avatar: elem.profile_path,\n      name: elem.name,\n      character: elem.character,\n    };\n  });\n};\n\nexport const getReviewes = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data.results.map(review => {\n    return {\n      author: review.author,\n      content: review.content,\n      reviewId: review.id,\n    };\n  });\n};\n","import { getCasts } from 'api';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from './Loader';\n\nexport default function Cast() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [actors, setActors] = useState([]);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    async function onGetCast() {\n      try {\n        setIsLoading(true);\n        const actors = await getCasts(id);\n        console.log(actors);\n        setActors(actors);\n      } catch {\n        setError('Sorry, we can not get data.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    onGetCast();\n  }, [id]);\n  return (\n    <>\n      <ul>\n        {error && <p>{error}</p>}\n        {isLoading && <Loader />}\n        {actors.map(actor => {\n          return (\n            <li key={actor.name}>\n              {actor.avatar ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200/${actor.avatar}`}\n                  alt={actor.name}\n                ></img>\n              ) : (\n                <img\n                  src=\"https://img.freepik.com/premium-vector/photo-frame-icon-empty-photo-blank-vector-on-isolated-transparent-background-eps-10_399089-1290.jpg\"\n                  alt={actor.name}\n                  width={200}\n                ></img>\n              )}\n              <p>{actor.name}</p>\n              <p>{actor.character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n","import { Audio } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <Audio\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"green\"\n      ariaLabel=\"loading\"\n      wrapperStyle\n      wrapperClass\n    />\n  );\n};\nexport default Loader;\n"],"names":["API_KEY","getTrending","axios","data","results","map","film","id","title","getDetails","image","poster_path","date","release_date","score","vote_average","overview","genres","getCasts","cast","elem","avatar","profile_path","name","character","getReviewes","review","author","content","reviewId","Cast","useState","isLoading","setIsLoading","error","setError","actors","setActors","useParams","useEffect","console","log","onGetCast","actor","src","alt","width","height","radius","color","ariaLabel","wrapperStyle","wrapperClass"],"sourceRoot":""}